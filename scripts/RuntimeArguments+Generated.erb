//AUTO-GENERATED: RuntimeArugment+Generated.erb. Run ./generate

extension DependencyContainer {
  
<% arg_count = 6 %>
<% (1..arg_count).each do |i| %>
<%   arg_types = (1..i).map { |n| "arg#{n} " }.join(", ") %>
<%   arg_param = i == 1 ? "arguments arg1: A" : "arguments arg1: A, " + (2..i).map{ |n| "_ arg#{n}: #{(n+64).chr}" }.join(", ") %>
<%   arg_param_name = i == 1 ? "arguments" : "arguments" %>
<%   arg_param_description = i == 1 ? "#{i} argument" : "list of #{i} arguments" %>
<%   arg_tuples = (1..i).map { |n| "#{(n+64).chr}" }.join(", ") %>
<%   arg_tuples_lowercase = (1..i).map { |n| "#{(n+96).chr}" }.join(", ") %>
<% if i == 1 %>
    // MARK: 1 Runtime Argument

    /**
    Register factory that accepts one runtime argument of type `A`. You can use up to six runtime arguments.

    - note: You can have several factories with different number or types of arguments registered for same type,
          optionally associated with some tags. When container resolves that type it matches the type,
          __number__, __types__ and __order__ of runtime arguments and optional tag that you pass to `resolve(tag:arguments:)` method.

    - parameters:
    - tag: The arbitrary tag to associate this factory with. Pass `nil` to associate with any tag. Default value is `nil`.
    - scope: The scope to use for this component. Default value is `Shared`.
    - factory: The factory to register.

    - seealso: `register(_:type:tag:factory:)`
    */

<% else %>

    // MARK: <%=i%> Runtime Arguments

    /// - seealso: `register(_:type:tag:factory:)`
    //AUTO-GENERATED: RuntimeArugment+Generated.erb. Run ./generate

<% end %>

    @discardableResult 
    public func register<T, <%= arg_tuples %>>(_ scope: ComponentScope = .shared,
                                          type: T.Type = T.self,
                                          tag: DependencyTagConvertible? = nil,
                                          factory: @escaping ((<%= arg_tuples %>)) throws -> T) -> Definition<T, (<%= arg_tuples %>)> {
        weak var definitionWeak : Definition<T, (<%= arg_tuples %>)>!

       let definition = register(scope: scope,
                              type: type,
                              tag: tag,
                              factory: factory,
                              numberOfArguments: <%=i%>)  { container, key in

        <% (1..i).each do |j| %>
            let <%= "#{(j+96).chr}" %>: <%= "#{(j+64).chr}" %> = try container.resolve(tag: key.tag)
        <% end %>
        
            if let definition = definitionWeak, let previouslyResolved: T = container.previouslyResolved(for: definition, key: key) {
                return previouslyResolved
            }

            return try factory((<%= arg_tuples_lowercase %>))
        }

        definitionWeak = definition
        return definition
    }

    <% if i == 1 %>
    /**
    AUTO-GENERATED: RuntimeArugment+Generated.erb. Run ./generate
    Resolve type `T` using one runtime argument.

    - note: When resolving a type container will first try to use definition 
           that exactly matches types of arguments that you pass to resolve method. 
           If it fails or no such definition is found container will try to _auto-wire_ component. 
           For that it will iterate through all the definitions registered for that type
           which factories accept any number of runtime arguments and are tagged with the same tag,
           passed to `resolve` method, or with no tag. Container will try to use these definitions
           to resolve a component one by one until one of them succeeds, starting with tagged definitions
           in order of decreasing their's factories number of arguments. If none of them succeds it will
           throw an error. If it finds two definitions with the same number of arguments - it will throw
           an error.

    - parameters:
      - tag: The arbitrary tag to lookup registered definition.
      - arg1: The first argument to pass to the definition's factory.

    - throws: `DipError.DefinitionNotFound`, `DipError.AutoInjectionFailed`, `DipError.AmbiguousDefinitions`

    - returns: An instance of type `T`.

    - seealso: `register(_:type:tag:factory:)`, `resolve(tag:builder:)`
    */
    <% else %>
    /// - seealso: `resolve(tag:arguments:)`
    //AUTO-GENERATED: RuntimeArugment+Generated.erb. Run ./generate
    <% end %>
    public func resolve<T, <%= arg_tuples %>>(tag: DependencyTagConvertible? = nil, <%= arg_param %>) throws -> T {
        return try resolve(tag: tag) { factory in try factory((<%= arg_types %>)) }
    }

    /// - seealso: `resolve(_:tag:)`, `resolve(tag:arguments:)`
    //AUTO-GENERATED: RuntimeArugment+Generated.erb. Run ./generate
    public func resolve<<%= arg_tuples %>>(_ type: Any.Type, tag: DependencyTagConvertible? = nil, <%= arg_param %>) throws -> Any {
        return try resolve(type, tag: tag) { factory in try factory((<%= arg_types %>)) }
    }

<% end %>

}

